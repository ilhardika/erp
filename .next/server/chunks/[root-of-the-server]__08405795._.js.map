{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":["file:///C:/Personal/Dibimbing%20Front%20End/Code/Project/erp/lib/mongodb.ts"],"sourcesContent":["import { MongoClient } from \"mongodb\";\r\n\r\nif (!process.env.MONGODB_URI) {\r\n  throw new Error('Invalid/Missing environment variable: \"MONGODB_URI\"');\r\n}\r\n\r\nconst uri = process.env.MONGODB_URI;\r\nconst options = {\r\n  serverSelectionTimeoutMS: 30000,\r\n  connectTimeoutMS: 30000,\r\n  maxPoolSize: 10,\r\n  minPoolSize: 1,\r\n  maxIdleTimeMS: 30000,\r\n  retryWrites: true,\r\n  // DNS resolver options for Atlas\r\n  family: 4, // Force IPv4\r\n  directConnection: false,\r\n  // Additional options for Atlas connection stability\r\n  heartbeatFrequencyMS: 10000,\r\n};\r\n\r\nlet client;\r\nlet clientPromise: Promise<MongoClient>;\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  // In development mode, use a global variable so that the value\r\n  // is preserved across module reloads caused by HMR (Hot Module Replacement).\r\n  const globalWithMongo = global as typeof globalThis & {\r\n    _mongoClientPromise?: Promise<MongoClient>;\r\n  };\r\n\r\n  if (!globalWithMongo._mongoClientPromise) {\r\n    client = new MongoClient(uri, options);\r\n    globalWithMongo._mongoClientPromise = client.connect();\r\n  }\r\n  clientPromise = globalWithMongo._mongoClientPromise;\r\n} else {\r\n  // In production mode, it's best to not use a global variable.\r\n  client = new MongoClient(uri, options);\r\n  clientPromise = client.connect();\r\n}\r\n\r\n// Export a module-scoped MongoClient promise. By doing this in a\r\n// separate module, the client can be shared across functions.\r\nexport default clientPromise;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,IAAI,CAAC,QAAQ,GAAG,CAAC,WAAW,EAAE;IAC5B,MAAM,IAAI,MAAM;AAClB;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW;AACnC,MAAM,UAAU;IACd,0BAA0B;IAC1B,kBAAkB;IAClB,aAAa;IACb,aAAa;IACb,eAAe;IACf,aAAa;IACb,iCAAiC;IACjC,QAAQ;IACR,kBAAkB;IAClB,oDAAoD;IACpD,sBAAsB;AACxB;AAEA,IAAI;AACJ,IAAI;AAEJ,wCAA4C;IAC1C,+DAA+D;IAC/D,6EAA6E;IAC7E,MAAM;IAIN,IAAI,CAAC,gBAAgB,mBAAmB,EAAE;QACxC,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC,KAAK;QAC9B,gBAAgB,mBAAmB,GAAG,OAAO,OAAO;IACtD;IACA,gBAAgB,gBAAgB,mBAAmB;AACrD;;uCAQe","debugId":null}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":["file:///C:/Personal/Dibimbing%20Front%20End/Code/Project/erp/app/api/auth/register/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport bcrypt from \"bcryptjs\";\nimport clientPromise from \"@/lib/mongodb\";\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { email, password, name, role = \"kasir\" } = await request.json();\n\n    if (!email || !password) {\n      return NextResponse.json(\n        { error: \"Email dan password harus diisi\" },\n        { status: 400 }\n      );\n    }\n\n    const client = await clientPromise;\n    const users = client.db(\"bizflow\").collection(\"users\");\n\n    // Check if user already exists\n    const existingUser = await users.findOne({\n      email: email.toLowerCase(),\n    });\n\n    if (existingUser) {\n      return NextResponse.json(\n        { error: \"Email sudah terdaftar\" },\n        { status: 400 }\n      );\n    }\n\n    // Hash password\n    const hashedPassword = await bcrypt.hash(password, 12);\n\n    // Create user\n    const result = await users.insertOne({\n      email: email.toLowerCase(),\n      password: hashedPassword,\n      name: name || email.split(\"@\")[0],\n      role,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    });\n\n    return NextResponse.json(\n      {\n        message: \"User berhasil dibuat\",\n        userId: result.insertedId,\n      },\n      { status: 201 }\n    );\n  } catch (error) {\n    console.error(\"Registration error:\", error);\n    return NextResponse.json(\n      { error: \"Terjadi kesalahan server\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,OAAO,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEpE,IAAI,CAAC,SAAS,CAAC,UAAU;YACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAiC,GAC1C;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,SAAS,MAAM,gHAAA,CAAA,UAAa;QAClC,MAAM,QAAQ,OAAO,EAAE,CAAC,WAAW,UAAU,CAAC;QAE9C,+BAA+B;QAC/B,MAAM,eAAe,MAAM,MAAM,OAAO,CAAC;YACvC,OAAO,MAAM,WAAW;QAC1B;QAEA,IAAI,cAAc;YAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAwB,GACjC;gBAAE,QAAQ;YAAI;QAElB;QAEA,gBAAgB;QAChB,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QAEnD,cAAc;QACd,MAAM,SAAS,MAAM,MAAM,SAAS,CAAC;YACnC,OAAO,MAAM,WAAW;YACxB,UAAU;YACV,MAAM,QAAQ,MAAM,KAAK,CAAC,IAAI,CAAC,EAAE;YACjC;YACA,WAAW,IAAI;YACf,WAAW,IAAI;QACjB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,QAAQ,OAAO,UAAU;QAC3B,GACA;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA2B,GACpC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}