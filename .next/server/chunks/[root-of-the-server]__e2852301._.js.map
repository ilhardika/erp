{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":["file:///C:/Personal/Dibimbing%20Front%20End/Code/Project/erp/lib/mongodb.ts"],"sourcesContent":["import { MongoClient } from \"mongodb\";\r\n\r\nif (!process.env.MONGODB_URI) {\r\n  throw new Error('Invalid/Missing environment variable: \"MONGODB_URI\"');\r\n}\r\n\r\nconst uri = process.env.MONGODB_URI;\r\nconst options = {\r\n  serverSelectionTimeoutMS: 30000,\r\n  connectTimeoutMS: 30000,\r\n  maxPoolSize: 10,\r\n  minPoolSize: 1,\r\n  maxIdleTimeMS: 30000,\r\n  retryWrites: true,\r\n  // DNS resolver options for Atlas\r\n  family: 4, // Force IPv4\r\n  directConnection: false,\r\n  // Additional options for Atlas connection stability\r\n  heartbeatFrequencyMS: 10000,\r\n};\r\n\r\nlet client;\r\nlet clientPromise: Promise<MongoClient>;\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  // In development mode, use a global variable so that the value\r\n  // is preserved across module reloads caused by HMR (Hot Module Replacement).\r\n  const globalWithMongo = global as typeof globalThis & {\r\n    _mongoClientPromise?: Promise<MongoClient>;\r\n  };\r\n\r\n  if (!globalWithMongo._mongoClientPromise) {\r\n    client = new MongoClient(uri, options);\r\n    globalWithMongo._mongoClientPromise = client.connect();\r\n  }\r\n  clientPromise = globalWithMongo._mongoClientPromise;\r\n} else {\r\n  // In production mode, it's best to not use a global variable.\r\n  client = new MongoClient(uri, options);\r\n  clientPromise = client.connect();\r\n}\r\n\r\n// Export a module-scoped MongoClient promise. By doing this in a\r\n// separate module, the client can be shared across functions.\r\nexport default clientPromise;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,IAAI,CAAC,QAAQ,GAAG,CAAC,WAAW,EAAE;IAC5B,MAAM,IAAI,MAAM;AAClB;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW;AACnC,MAAM,UAAU;IACd,0BAA0B;IAC1B,kBAAkB;IAClB,aAAa;IACb,aAAa;IACb,eAAe;IACf,aAAa;IACb,iCAAiC;IACjC,QAAQ;IACR,kBAAkB;IAClB,oDAAoD;IACpD,sBAAsB;AACxB;AAEA,IAAI;AACJ,IAAI;AAEJ,wCAA4C;IAC1C,+DAA+D;IAC/D,6EAA6E;IAC7E,MAAM;IAIN,IAAI,CAAC,gBAAgB,mBAAmB,EAAE;QACxC,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC,KAAK;QAC9B,gBAAgB,mBAAmB,GAAG,OAAO,OAAO;IACtD;IACA,gBAAgB,gBAAgB,mBAAmB;AACrD;;uCAQe","debugId":null}},
    {"offset": {"line": 194, "column": 0}, "map": {"version":3,"sources":["file:///C:/Personal/Dibimbing%20Front%20End/Code/Project/erp/lib/db-warmup.ts"],"sourcesContent":["import clientPromise from \"./mongodb\";\r\n\r\nlet isConnected = false;\r\n\r\nasync function sleep(ms: number) {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n\r\nexport async function connectDB(retries = 3) {\r\n  if (isConnected) {\r\n    return;\r\n  }\r\n\r\n  for (let attempt = 1; attempt <= retries; attempt++) {\r\n    try {\r\n      console.log(\r\n        `Attempting MongoDB connection (attempt ${attempt}/${retries})...`\r\n      );\r\n      const client = await clientPromise;\r\n\r\n      // Test the connection with timeout\r\n      const pingPromise = client.db(\"bizflow\").admin().ping();\r\n      const timeoutPromise = new Promise((_, reject) =>\r\n        setTimeout(() => reject(new Error(\"Connection timeout\")), 10000)\r\n      );\r\n\r\n      await Promise.race([pingPromise, timeoutPromise]);\r\n\r\n      isConnected = true;\r\n      console.log(\"MongoDB connection established and warmed up\");\r\n      return;\r\n    } catch (error) {\r\n      console.error(`MongoDB connection attempt ${attempt} failed:`, error);\r\n\r\n      if (attempt < retries) {\r\n        const delay = attempt * 2000; // Progressive delay: 2s, 4s, 6s\r\n        console.log(`Retrying in ${delay}ms...`);\r\n        await sleep(delay);\r\n      } else {\r\n        console.error(\"All MongoDB connection attempts failed\");\r\n        throw error;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Auto-warmup in development with retry\r\nif (process.env.NODE_ENV === \"development\") {\r\n  connectDB().catch((error) => {\r\n    console.error(\"Failed to warm up MongoDB connection on startup:\", error);\r\n  });\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,IAAI,cAAc;AAElB,eAAe,MAAM,EAAU;IAC7B,OAAO,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;AACtD;AAEO,eAAe,UAAU,UAAU,CAAC;IACzC,IAAI,aAAa;QACf;IACF;IAEA,IAAK,IAAI,UAAU,GAAG,WAAW,SAAS,UAAW;QACnD,IAAI;YACF,QAAQ,GAAG,CACT,CAAC,uCAAuC,EAAE,QAAQ,CAAC,EAAE,QAAQ,IAAI,CAAC;YAEpE,MAAM,SAAS,MAAM,gHAAA,CAAA,UAAa;YAElC,mCAAmC;YACnC,MAAM,cAAc,OAAO,EAAE,CAAC,WAAW,KAAK,GAAG,IAAI;YACrD,MAAM,iBAAiB,IAAI,QAAQ,CAAC,GAAG,SACrC,WAAW,IAAM,OAAO,IAAI,MAAM,wBAAwB;YAG5D,MAAM,QAAQ,IAAI,CAAC;gBAAC;gBAAa;aAAe;YAEhD,cAAc;YACd,QAAQ,GAAG,CAAC;YACZ;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,CAAC,2BAA2B,EAAE,QAAQ,QAAQ,CAAC,EAAE;YAE/D,IAAI,UAAU,SAAS;gBACrB,MAAM,QAAQ,UAAU,MAAM,gCAAgC;gBAC9D,QAAQ,GAAG,CAAC,CAAC,YAAY,EAAE,MAAM,KAAK,CAAC;gBACvC,MAAM,MAAM;YACd,OAAO;gBACL,QAAQ,KAAK,CAAC;gBACd,MAAM;YACR;QACF;IACF;AACF;AAEA,wCAAwC;AACxC,wCAA4C;IAC1C,YAAY,KAAK,CAAC,CAAC;QACjB,QAAQ,KAAK,CAAC,oDAAoD;IACpE;AACF","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///C:/Personal/Dibimbing%20Front%20End/Code/Project/erp/lib/auth.ts"],"sourcesContent":["import { NextAuthOptions } from \"next-auth\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport clientPromise from \"./mongodb\";\r\nimport { connectDB } from \"./db-warmup\";\r\n\r\nexport const authOptions: NextAuthOptions = {\r\n  providers: [\r\n    CredentialsProvider({\r\n      name: \"credentials\",\r\n      credentials: {\r\n        email: { label: \"Email\", type: \"email\" },\r\n        password: { label: \"Password\", type: \"password\" },\r\n      },\r\n      async authorize(credentials) {\r\n        console.log(\"=== AUTH AUTHORIZE START ===\");\r\n        console.log(\"Received credentials:\", {\r\n          email: credentials?.email,\r\n          passwordProvided: !!credentials?.password,\r\n        });\r\n\r\n        if (!credentials?.email || !credentials?.password) {\r\n          console.error(\"Missing email or password\", credentials);\r\n          return null;\r\n        }\r\n\r\n        try {\r\n          console.log(\"Attempting to connect to MongoDB...\");\r\n\r\n          // Ensure connection is warmed up with retry\r\n          await connectDB(3);\r\n\r\n          const client = await clientPromise;\r\n          console.log(\"MongoDB connection successful\");\r\n\r\n          const users = client.db(\"bizflow\").collection(\"users\");\r\n\r\n          console.log(\r\n            \"Looking for user with email:\",\r\n            credentials.email.toLowerCase()\r\n          );\r\n          const user = await users.findOne({\r\n            email: credentials.email.toLowerCase(),\r\n          });\r\n\r\n          if (!user) {\r\n            console.error(\"User not found for email:\", credentials.email);\r\n            console.log(\"Available users count:\", await users.countDocuments());\r\n            return null;\r\n          }\r\n\r\n          console.log(\"User found:\", {\r\n            id: user._id,\r\n            email: user.email,\r\n            name: user.name,\r\n            hasPassword: !!user.password,\r\n          });\r\n\r\n          console.log(\"About to compare passwords...\");\r\n          console.log(\"Input password:\", credentials.password);\r\n          console.log(\"Input password length:\", credentials.password.length);\r\n          console.log(\"Stored hash length:\", user.password.length);\r\n          console.log(\r\n            \"Stored hash starts with:\",\r\n            user.password.substring(0, 10)\r\n          );\r\n\r\n          const isPasswordValid = await bcrypt.compare(\r\n            credentials.password,\r\n            user.password\r\n          );\r\n\r\n          console.log(\"Password comparison result:\", isPasswordValid);\r\n\r\n          if (!isPasswordValid) {\r\n            console.error(\"Invalid password for email:\", credentials.email);\r\n            return null;\r\n          }\r\n\r\n          console.log(\"Login success for email:\", credentials.email);\r\n          const returnUser = {\r\n            id: user._id.toString(),\r\n            email: user.email,\r\n            name: user.name,\r\n            role: user.role,\r\n          };\r\n          console.log(\"Returning user object:\", returnUser);\r\n          console.log(\"=== AUTH AUTHORIZE SUCCESS ===\");\r\n          return returnUser;\r\n        } catch (error) {\r\n          console.error(\"=== AUTH AUTHORIZE ERROR ===\");\r\n          console.error(\"Auth error:\", error);\r\n          // More specific error handling\r\n          if (error instanceof Error) {\r\n            if (\r\n              error.message.includes(\"ENOTFOUND\") ||\r\n              error.message.includes(\"ETIMEDOUT\")\r\n            ) {\r\n              console.error(\"MongoDB connection failed - Network/DNS issue\");\r\n            } else if (error.message.includes(\"Authentication failed\")) {\r\n              console.error(\r\n                \"MongoDB authentication failed - Check credentials\"\r\n              );\r\n            } else if (error.message.includes(\"MongoServerSelectionError\")) {\r\n              console.error(\r\n                \"MongoDB server selection failed - Server unreachable\"\r\n              );\r\n            }\r\n          }\r\n          return null;\r\n        }\r\n      },\r\n    }),\r\n  ],\r\n  session: {\r\n    strategy: \"jwt\",\r\n    maxAge: 30 * 24 * 60 * 60, // 30 days\r\n  },\r\n  callbacks: {\r\n    async jwt({ token, user }) {\r\n      console.log(\"JWT callback:\", {\r\n        user: user ? \"present\" : \"null\",\r\n        token: token ? \"present\" : \"null\",\r\n      });\r\n      if (user) {\r\n        token.role = user.role;\r\n        console.log(\"Added role to token:\", user.role);\r\n      }\r\n      return token;\r\n    },\r\n    async session({ session, token }) {\r\n      console.log(\"Session callback:\", {\r\n        session: session ? \"present\" : \"null\",\r\n        token: token ? \"present\" : \"null\",\r\n      });\r\n      if (token) {\r\n        session.user.id = token.sub!;\r\n        session.user.role = token.role as string;\r\n        console.log(\"Session user:\", {\r\n          id: session.user.id,\r\n          role: session.user.role,\r\n        });\r\n      }\r\n      return session;\r\n    },\r\n  },\r\n  pages: {\r\n    signIn: \"/login\",\r\n  },\r\n  debug: process.env.NODE_ENV === \"development\",\r\n  secret: process.env.NEXTAUTH_SECRET,\r\n  cookies: {\r\n    sessionToken: {\r\n      name: `next-auth.session-token`,\r\n      options: {\r\n        httpOnly: true,\r\n        sameSite: \"lax\",\r\n        path: \"/\",\r\n        secure: process.env.NODE_ENV === \"production\",\r\n      },\r\n    },\r\n  },\r\n};\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 393, "column": 0}, "map": {"version":3,"sources":["file:///C:/Personal/Dibimbing%20Front%20End/Code/Project/erp/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\nimport { authOptions } from \"@/lib/auth\";\n\nconst handler = NextAuth(authOptions);\n\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE,6GAAA,CAAA,cAAW","debugId":null}}]
}